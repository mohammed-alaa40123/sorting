Bubble Sort:

The function bubble_sort takes a list (lst) as input and sorts it in ascending order using the Bubble Sort algorithm.

The variable n is initialized to the length of the input list.

The sorted variable is used to optimize the algorithm. If the list is already sorted, the algorithm can terminate early. The outer loop iterates through each element of the list.

The inner loop compares adjacent elements. If an element at index j is smaller than the element at index i, a swap is performed. This process is repeated until the largest element "bubbles up" to its correct position.

The sorted variable is used to check if any swaps were made during a pass through the list. If no swaps were made, the list is already sorted, and the algorithm can terminate early.

Best Use Cases:

Bubble Sort is a simple sorting algorithm that works well for small datasets.
It is easy to understand and implement, making it suitable for educational purposes and scenarios where simplicity is a priority.
Bubble Sort is not the most efficient sorting algorithm for large datasets, as its time complexity is O(n^2) in the worst case.
When to Use:

Use Bubble Sort when dealing with small datasets or when simplicity is more important than efficiency.
Avoid using Bubble Sort for large datasets or real-world applications where faster sorting algorithms (e.g., QuickSort or MergeSort) would be more suitable.
Overall:
Bubble Sort is a basic sorting algorithm that is easy to understand but not the most efficient for large datasets. It serves as a good introductory algorithm for learning sorting concepts. However, in practical applications, more efficient algorithms are often preferred.


https://www.programiz.com/dsa/bubble-sort
https://www.geeksforgeeks.org/bubble-sort/




Quick Sort:

The quick_sort function takes a list (lst) and the indices of the first and last elements (low and high) as input and sorts the list using the QuickSort algorithm.

The partition function is a crucial part of the QuickSort algorithm. It selects a pivot element (in this case, the last element of the list) and rearranges the elements such that elements smaller than the pivot are on the left, and elements greater than the pivot are on the right.

The quick_sort function recursively calls itself on the sublists created by the partition step. The algorithm continues to divide the list into smaller sublists until the base case is reached (i.e., when the sublist has one or zero elements).

Best Use Cases:

QuickSort is a highly efficient and widely used sorting algorithm for general-purpose sorting.
It has an average-case time complexity of O(n log n), making it faster than many other sorting algorithms.
QuickSort is often preferred in practice for large datasets due to its speed.
When to Use:

Use QuickSort when you need a fast and efficient sorting algorithm for general-purpose sorting.
It is suitable for both small and large datasets, and its average-case performance is often better than other sorting algorithms like Bubble Sort or Insertion Sort.
Overall:
QuickSort is a versatile and efficient sorting algorithm with widespread use. It is particularly well-suited for scenarios where fast sorting is required, making it a popular choice in various applications and programming environments.


https://www.geeksforgeeks.org/quick-sort/